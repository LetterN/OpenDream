using Robust.Client.AutoGenerated;
using Robust.Client.Graphics;
using Robust.Client.ResourceManagement;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Network;
using Robust.Shared.Timing;

namespace OpenDreamClient.States.Connecting;

[GenerateTypedNameReferences]
public sealed partial class ConnectingControl : Control {
    [Dependency] private readonly IClientNetManager _netManager = default!;
    [Dependency] private readonly IGameTiming _timing = default!;

    private float _tickSecond;

    public ConnectingControl(IResourceCache resCache, IConfigurationManager configMan) {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        InfoTexts.PanelOverride = new StyleBoxFlat(Color.Gray);

        ConnectingLabel.FontOverride = new VectorFont(resCache.GetResource<FontResource>("/Fonts/NotoSans-Regular.ttf"), 24);

        LayoutContainer.SetAnchorPreset(this, LayoutContainer.LayoutPreset.Wide);

        LayoutContainer.SetAnchorPreset(Logo, LayoutContainer.LayoutPreset.CenterTop);
        LayoutContainer.SetMarginTop(Logo, 60 * UIScale);
        LayoutContainer.SetGrowHorizontal(Logo, LayoutContainer.GrowDirection.Both);
        LayoutContainer.SetGrowVertical(Logo, LayoutContainer.GrowDirection.End);

        LayoutContainer.SetAnchorPreset(InfoTexts, LayoutContainer.LayoutPreset.BottomWide);
        LayoutContainer.SetMarginBottom(InfoTexts, -30 * UIScale);
        LayoutContainer.SetGrowHorizontal(InfoTexts, LayoutContainer.GrowDirection.Both);
        LayoutContainer.SetGrowVertical(InfoTexts, LayoutContainer.GrowDirection.Begin);

        Logo.Texture = resCache.GetResource<TextureResource>("/OpenDream/Logo/logo.png");
    }

    protected override void FrameUpdate(FrameEventArgs args) {
        base.FrameUpdate(args);
        InfoText.Text = _netManager.ClientConnectState switch {
            ClientConnectionState.ResolvingHost => "Resolving Host",
            ClientConnectionState.EstablishingConnection => "Establishing Connection",
            ClientConnectionState.Handshake => "Handshaking",
            ClientConnectionState.Connected => "Connected",
            _ => "Disconnected"
        };

        _tickSecond += args.DeltaSeconds;

        if (_tickSecond >= 1) {
            _tickSecond -= 1;
            switch (ConnectingLabel.Text.Length) {
                case 10:
                    ConnectingLabel.Text = "Connecting.";
                    break;
                case 11:
                    ConnectingLabel.Text = "Connecting..";
                    break;
                case 12:
                    ConnectingLabel.Text = "Connecting...";
                    break;
                default:
                    ConnectingLabel.Text = "Connecting";
                    break;
            }
        }
    }
}
